<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 日志编码方式 -->
    <property name="log.encoding" value="UTF-8"/>
    <!-- 日志保留多少天 -->
    <property name="log.maxHistory" value="180"/>
    <!-- 文件达到 多大时 会被压缩和切割 -->
    <property name="log.fileSize" value="100MB"/>
    <!-- 日志总保存量为多大 -->
    <property name="log.totalSizeCap" value="100GB"/>
    <!-- 日志存放路径 -->
    <property name="log.path" value="logs/wx-push" />
    <!-- 日志的归档存放位置 -->
    <property name="log.filedPath" value="logs/wx-push/bak"/>
     <!-- 日志输出格式 -->
    <property name="log.pattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p][%X{rid}] [%t] [%c-%L] - %m%n"/>
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!-- 系统日志输出 -->
    <appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/info.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log.filedPath}/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- 日志保留多少天 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!-- 日志总保存量为多大 -->
            <totalSizeCap >${log.totalSizeCap}</totalSizeCap >
            <!--文件达到 多大时 会被压缩和切割 -->
            <maxFileSize>${log.fileSize}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 过滤的级别 -->
            <level>DEBUG</level>
        </filter>

	</appender>

    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log.filedPath}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- 日志保留多少天 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!-- 日志总保存量为多大 -->
            <totalSizeCap >${log.totalSizeCap}</totalSizeCap >
            <!--文件达到 多大时 会被压缩和切割 -->
            <maxFileSize>${log.fileSize}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
        </filter>
    </appender>

    <!--druid慢查询日志输出，没有使用druid监控的去掉这部分以及下面的一个相关logger-->
    <appender name="Druid_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/druid.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log.filedPath}/druid.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- 日志保留多少天 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!-- 日志总保存量为多大 -->
            <totalSizeCap >${log.totalSizeCap}</totalSizeCap >
            <!--文件达到 多大时 会被压缩和切割 -->
            <maxFileSize>${log.fileSize}</maxFileSize>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--过滤日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
        </filter>
    </appender>
    <!--druid相关logger，additivity="false" 设置打印信息行为不向上级传递-->
    <logger name="com.alibaba.druid.filter.stat.StatFilter" level="ERROR" additivity="false">
        <appender-ref ref="console" />
        <appender-ref ref="Druid_FILE" />
    </logger>

    <!-- 系统模块日志级别控制  -->
    <logger name="cn.mopon.toc" level="DEBUG" />
    <!-- Spring日志级别控制  -->
    <logger name="org.springframework.web.servlet.DispatcherServlet" level="debug" />
    <!-- spring mongo 查询日志 -->
    <logger name="org.springframework.data.mongodb" level="debug" />


	<!--系统操作日志-->
    <root level="info">
        <appender-ref ref="console" />
        <appender-ref ref="file_info" />
        <appender-ref ref="file_error" />
    </root>
</configuration>